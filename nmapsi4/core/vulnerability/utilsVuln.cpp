/***************************************************************************
 *   Copyright (C) 2011 by Francesco Cecconi                               *
 *   francesco.cecconi@gmail.com                                           *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License.        *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#include "../../mainwin.h"

void nmapClass::callSearchHistoryVuln() {
#ifndef VULN_NO_DEBUG
    qDebug() << "searchVuln:: call...";
#endif

    if (!actionAdd_Bookmark->isEnabled()) {
        actionAdd_Bookmark->setEnabled(true);
        action_Add_BookmarkToolBar->setEnabled(true);
    }
    logHistory *history = new logHistory("nmapsi4/cacheVuln", hostCache);
    history->searchHistory(comboVulnRis->currentText(), comboVulnRis);
    delete history;
     
}

void nmapClass::callVulnCheck() {
    comboVulnRis->clear();
    comboVulnRis->insertItem(0,treeBookVuln->currentItem()->text(0));
    tabVuln->setCurrentIndex(0);
    searchVulnNG();
}

void nmapClass::vulnPostScan() {
    actSearch->setEnabled(true);
    actStop->setEnabled(false);
}

void nmapClass::updateComboVuln(const QString& value) {

    comboVulnRis->clear();

    if(comboVuln->currentIndex()) {
        comboVulnRis->insertItem(0,value);
    } else {
        comboVulnRis->lineEdit()->clear();
    }

}

void nmapClass::updateComboWebV() {

    // clear comboWeb on first time
    comboWebV->clear();
    
    // insert default static url in comboWeb vulnerabilitier
    QMap<QString, QString> tmpStaticProfileUrl_ = defaultUrlVuln();
    QMap<QString, QString>::const_iterator i;
    for (i = tmpStaticProfileUrl_.constBegin(); i != tmpStaticProfileUrl_.constEnd(); ++i) {
	comboWebV->insertItem(1, i.key());
    }
    
    //TODO:: just a separetor from default and user saved url
    comboWebV->insertSeparator(1);
    
    //TODO:: value from treeWidget url
    for(int index=0; index < treeWidgetVulnUrl->topLevelItemCount(); index++) {
        comboWebV->insertItem(1, treeWidgetVulnUrl->topLevelItem(index)->text(0));
    }
    
}

void nmapClass::startAddUrl_ui() {
    connect(m_dialogUrl, SIGNAL(doneUrl(const QString, const QString)),
            this, SLOT(addUrlToBookmarks(const QString, const QString)));
    
    m_dialogUrl->show();
}

void nmapClass::addUrlToBookmarks(const QString urlName, const QString urlAddr) {
    // TODO insert value on bookmark
    logHistory *history_ = new logHistory(treeWidgetVulnUrl, "nmapsi4/nameUrlVuln" , "nmapsi4/nameUrlAddr", -1);
    history_->addItemHistory(urlName, urlAddr);
    history_->updateBookMarks();
    delete history_;
    // reload comboVuln with website
    updateComboWebV();
}

void nmapClass::removeUrlToBookmarks() {
    // TODO remove url vuln
    logHistory *history_ = new logHistory(treeWidgetVulnUrl, "nmapsi4/nameUrlVuln" , "nmapsi4/nameUrlAddr", -1);
    history_->deleteItemBookmark(treeWidgetVulnUrl->currentItem()->text(0));
    delete history_;
    updateComboWebV();
}
