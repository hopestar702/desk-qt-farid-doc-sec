/***************************************************************************
 *   Copyright (C) 2011 by Francesco Cecconi                               *
 *   francesco.cecconi@gmail.com                                           *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License.        *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#include "mainwin.h"

void nmapClass::callSearchHistoryVuln() 
{
    if (!actionAdd_Bookmark->isEnabled()) 
    {
        actionAdd_Bookmark->setEnabled(true);
        action_Add_BookmarkToolBar->setEnabled(true);
    }
    
    logHistory *history = new logHistory("nmapsi4/cacheVuln", hostCache);
    history->searchHistory(comboVulnRis->currentText(), comboVulnRis);
    delete history;
     
}

void nmapClass::callVulnCheck() 
{
    comboVulnRis->clear();
    comboVulnRis->insertItem(0,treeBookVuln->currentItem()->text(0));
    tabVuln->setCurrentIndex(0);
    searchVulnNG();
}

void nmapClass::vulnPostScan() 
{
    _collections.value("search-act")->setEnabled(true);
    _collections.value("stop-act")->setEnabled(false);
}

void nmapClass::updateComboVuln(const QString& value) 
{
    comboVulnRis->clear();

    if(comboVuln->currentIndex()) 
    {
        comboVulnRis->insertItem(0,value);
    } 
    else 
    {
        comboVulnRis->lineEdit()->clear();
    }

}

void nmapClass::objVulnButton() 
{ // SLOT
    comboVulnRis->clear();
    
    QString tmpServices_ = GItree->currentItem()->text(0);
    QList<QTreeWidgetItem*> itemList = listWscan->findItems(tmpServices_, Qt::MatchExactly, 2);

    if(comboVulnRis->itemText(0).isEmpty())
    {
        comboVulnRis->addItem(itemList[0]->text(3));
    } 
    else 
    {
        comboVulnRis->setItemText(0,itemList[0]->text(3));
    }

    _collectionsButton.value("scan-sez")->setChecked(false);
    _collectionsButton.value("log-sez")->setChecked(false);
    _collectionsButton.value("vuln-sez")->setChecked(true);
    _collectionsButton.value("discover-sez")->setChecked(false);

    toolBar->setVisible(false);
    toolBarBook->setVisible(true);
    toolBar_2->setVisible(false);
    toolBarSearch->setVisible(true);

    tabUi->removeTab(tabUi->indexOf(tabSOpt));
    tabUi->removeTab(tabUi->indexOf(tabNseOpt));
    tabUi->removeTab(tabUi->indexOf(tabScan));
    tabUi->removeTab(tabUi->indexOf(tabLog));
    tabUi->removeTab(tabUi->indexOf(tabDiscover));
    tabUi->insertTab(0,tabVulnMain,QIcon(QString::fromUtf8(":/images/images/viewmag+.png")),"Vulnerability");
    tabUi->setCurrentIndex(0);

    // disable scan action
    //_collectionsButton.value("nss-act")->setVisible(false);
    //_collectionsButton.value("par-act")->setVisible(false);
    _collectionsButton.value("nss-act")->setEnabled(false);
    _collectionsButton.value("par-act")->setEnabled(false);
    _collectionsButton.value("tab-look-act")->setEnabled(false);
    _collectionsButton.value("tab-trace-act")->setEnabled(false);
    _collectionsButton.value("tab-monitor-act")->setEnabled(false);
}

void nmapClass::updateComboWebV() 
{
    // clear comboWeb on first time
    comboWebV->clear();   
    // insert default static url in comboWeb vulnerabilitier
    QHash<QString, QString> tmpStaticProfileUrl_ = defaultUrlVuln();
    QHash<QString, QString>::const_iterator i;
    for (i = tmpStaticProfileUrl_.constBegin(); i != tmpStaticProfileUrl_.constEnd(); ++i) 
    {
        comboWebV->insertItem(1, i.key());
    }
    
    // value from treeWidget url
    for(int index=0; index < treeWidgetVulnUrl->topLevelItemCount(); index++) 
    {
        comboWebV->insertItem(3, treeWidgetVulnUrl->topLevelItem(index)->text(0));
    }
    
}

void nmapClass::startAddUrl_ui() 
{   
    mainUrlClass dialogUrl_(this);
    connect(&dialogUrl_, SIGNAL(doneUrl(QString,QString)),
            this, SLOT(addUrlToBookmarks(QString,QString)));
    
    dialogUrl_.exec();
}

void nmapClass::addUrlToBookmarks(const QString urlName, const QString urlAddr) 
{
    logHistory *history_ = new logHistory(treeWidgetVulnUrl, "nmapsi4/nameUrlVuln" , "nmapsi4/nameUrlAddr", -1);
    history_->addItemHistory(urlName, urlAddr);
    history_->updateBookMarks();
    delete history_;
    // reload comboVuln with website
    updateComboWebV();
}

void nmapClass::removeUrlToBookmarks() 
{
    if (treeWidgetVulnUrl->selectedItems().isEmpty()) 
    {
        return;
    }
    
    //remove url vuln
    logHistory *history_ = new logHistory(treeWidgetVulnUrl, "nmapsi4/nameUrlVuln" , "nmapsi4/nameUrlAddr", -1);
    history_->deleteItemBookmark(treeWidgetVulnUrl->selectedItems()[0]->text(0));
    delete history_;
    updateComboWebV();
}
