/***************************************************************************
 *   Copyright (C) 2011 by Francesco Cecconi                               *
 *   francesco.cecconi@gmail.com                                           *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License.        *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#include "vulnerability.h"
#include "mainwindow.h"

Vulnerability::Vulnerability(MainWindow* parent)
: QObject(parent), m_ui(parent)
{
    setupActions();

    connect(m_ui->tWresult, SIGNAL(tabCloseRequested(int)),
            this,SLOT(closeVulnTab(int)));
    connect(m_ui->comboVulnRis->lineEdit(), SIGNAL(returnPressed()),
            this, SLOT(searchVulnerability()));
    connect(m_ui->actionAdd_vulnerability_search_url, SIGNAL(triggered()),
            this, SLOT(showAddUrlUi()));
    connect(m_ui->comboVulnRis->lineEdit(), SIGNAL(cursorPositionChanged(int,int)),
            this, SLOT(updateComboServicesProperties()));
    connect(m_ui->comboVuln, SIGNAL(currentIndexChanged(QString)),
            this, SLOT(updateComboVuln(QString)));
    connect(m_ui->treeVulnNseRecovered, SIGNAL(itemSelectionChanged()),
            this, SLOT(searchVulnFromTreeWidget()));
}

Vulnerability::~Vulnerability()
{
    freemap<QString,QAction*>::itemDeleteAll(m_collections);
}

void Vulnerability::setupActions()
{
    /**
     * Setup actions for vulnerability section
     */
    QAction* action;

    action = new QAction(this);
    action->setIcon(QIcon(QString::fromUtf8(":/images/images/viewmag.png")));
    action->setIconText(tr("Search"));
    action->setEnabled(false);
    m_collections.insert("search-act",action);
    connect(action, SIGNAL(triggered()),this, SLOT(searchVulnerabilityFromCombo()));
    m_ui->toolBarSearch->addAction(action);

    action = new QAction(this);
    action->setIcon(QIcon(QString::fromUtf8(":/images/images/left.png")));
    action->setIconText(tr("Back"));
    action->setEnabled(false);
    m_collections.insert("back-act",action);
    connect(action, SIGNAL(triggered()),this, SLOT(tabWebBack()));
    m_ui->toolBarSearch->addAction(action);

    action = new QAction(this);
    action->setIcon(QIcon(QString::fromUtf8(":/images/images/right.png")));
    action->setIconText(tr("Forward"));
    action->setEnabled(false);
    m_collections.insert("forward-act",action);
    connect(action, SIGNAL(triggered()),this, SLOT(tabWebForward()));
    m_ui->toolBarSearch->addAction(action);

    action = new QAction(this);
    action->setIcon(QIcon(QString::fromUtf8(":/images/images/button_cancel.png")));
    action->setIconText(tr("Stop"));
    action->setEnabled(false);
    m_collections.insert("stop-act",action);
    connect(action, SIGNAL(triggered()),this, SLOT(tabWebStop()));
    m_ui->toolBarSearch->addAction(action);

    m_ui->toolBarSearch->setContextMenuPolicy(Qt::PreventContextMenu);
}


const QList< QPair<QString, QString> > Vulnerability::getDefaultUrlList()
{
    QList< QPair<QString, QString> > urlListModel;
    QPair<QString, QString> urlModel;

    // set default name+value url
    urlModel.first = "cve.mitre.org";
    urlModel.second = "http://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=";
    urlListModel.push_back(urlModel);

    urlModel.first = "www.securityfocus.com";
    urlModel.second = "http://www.securityfocus.com/swsearch?sbm=bid&submit=Search%21&metaname=alldoc&sort=swishrank&query=";
    urlListModel.push_back(urlModel);

    urlModel.first = "secunia.com";
    urlModel.second = "http://secunia.com/advisories/search/?search=";
    urlListModel.push_back(urlModel);

    urlModel.first = "web.nvd.nist.gov";
    urlModel.second = "http://web.nvd.nist.gov/view/vuln/search-results?search_type=all&cves=on&query=";
    urlListModel.push_back(urlModel);

    urlModel.first = "osvdb.org";
    urlModel.second = "http://osvdb.org/search?search[vuln_title]=";
    urlListModel.push_back(urlModel);

    return urlListModel;
}

void Vulnerability::searchVulnerabilityFromCombo()
{
    if (m_ui->comboVulnRis->currentText().isEmpty())
    {
        return;
    }

    // save current search on bookmark
    m_ui->m_bookmark->saveServiceToBookmark(m_ui->comboVulnRis->currentText(), m_ui->m_hostCache);
    //update completer cache
    m_ui->updateCompleter();

    QString finalUrlString;
    QString tmpSearchString;
    // search string from QComboBox
    tmpSearchString = m_ui->comboVulnRis->currentText();
    // space to + for correct search string format
    tmpSearchString.replace(QString(" "), QString("+"));

    // create QHash for default profile
    QList< QPair<QString, QString> > urlListModel = getDefaultUrlList();

    // selection url from key for search
    if (m_ui->comboWebV->currentIndex() < urlListModel.size())
    {
        // It is a default url, stored in QList
        QListIterator< QPair<QString, QString> > i(urlListModel);
        while (i.hasNext())
        {
            QPair<QString, QString> urlModel = i.next();
            if (urlModel.first == m_ui->comboWebV->currentText())
            {
                finalUrlString = urlModel.second;
            }
        }
    }
    else
    {
        // It isn't a default url, but an url from treeWidget
        QList<QTreeWidgetItem *> resultList_ = m_ui->treeWidgetVulnUrl->findItems(m_ui->comboWebV->currentText(),Qt::MatchExactly,0);
        finalUrlString = resultList_[0]->text(1);
    }

    finalUrlString.append(tmpSearchString);

    QUrl urlFinal(finalUrlString);
    searchVulnerability(urlFinal);
}

void Vulnerability::searchVulnerability(const QUrl& address)
{
    // default action settings
    m_collections.value("stop-act")->setEnabled(true);
    m_collections.value("back-act")->setEnabled(true);
    m_collections.value("forward-act")->setEnabled(true);

    // make tabBar visible for the first search
    if(!m_webViewList.size()) {
        m_ui->tWresult->setVisible(true);
    }

    // create new tab with a QWebView
    QWebView *page = new QWebView(m_ui);
    m_webViewList.push_back(page);
    page->load(address);
    // FIXME: a best tab name ip::authority
    m_ui->tWresult->addTab(page,address.authority());
    connect(page, SIGNAL(loadProgress(int)),m_ui->progressWeb, SLOT(setValue(int)));
    connect(page, SIGNAL(loadFinished(bool)),this, SLOT(vulnPostScan()));
}

void Vulnerability::searchVulnFromTreeWidget()
{
    if (!m_ui->treeVulnNseRecovered->selectedItems().size()) {
        return;
    }

    searchVulnerability(m_ui->treeVulnNseRecovered->selectedItems()[0]->text(0));
}

void Vulnerability::closeVulnTab(int index)
{
    QWebView *page = m_webViewList.takeAt(index);
    m_ui->tWresult->removeTab(index);
    delete page;

    if (!m_webViewList.size())
    {
        m_ui->tWresult->setVisible(false);
        // disable search action in vulnerability toolBar
        m_collections.value("search-act")->setEnabled(false);
    }
}

void Vulnerability::tabWebBack()
{
    m_webViewList[m_ui->tWresult->currentIndex()]->triggerPageAction(QWebPage::Back);
}

void Vulnerability::tabWebForward()
{
    m_webViewList[m_ui->tWresult->currentIndex()]->triggerPageAction(QWebPage::Forward);
}

void Vulnerability::tabWebStop()
{
    m_webViewList[m_ui->tWresult->currentIndex()]->triggerPageAction(QWebPage::Stop);
}

void Vulnerability::vulnPostScan()
{
    m_collections.value("stop-act")->setEnabled(false);
}

void Vulnerability::callVulnCheck()
{
    m_ui->comboVulnRis->clear();
    m_ui->comboVulnRis->insertItem(0,m_ui->treeBookVuln->currentItem()->text(0));
    searchVulnerabilityFromCombo();
}

void Vulnerability::linkCompleterToServices()
{
    if (!m_ui->actionAdd_Bookmark->isEnabled())
    {
        m_ui->actionAdd_Bookmark->setEnabled(true);
    }


    if (m_ui->m_vulnModel.isNull())
    {
        return;
    }

    if (m_ui->m_completerVuln.isNull())
    {
        m_ui->m_completerVuln = new QCompleter(m_ui->m_vulnModel.data(),m_ui);
        m_ui->m_completerVuln.data()->setCompletionRole(QCompleter::InlineCompletion);
        m_ui->m_completerVuln.data()->setWrapAround(false);
        m_ui->m_completerVuln.data()->setCaseSensitivity(Qt::CaseInsensitive);
        m_ui->comboVulnRis->setCompleter(m_ui->m_completerVuln.data());
    }
}

void Vulnerability::updateComboVuln(const QString& value)
{
    m_ui->comboVulnRis->clear();

    if(m_ui->comboVuln->currentIndex())
    {
        m_ui->comboVulnRis->insertItem(0,value);
    }
    else
    {
        m_ui->comboVulnRis->lineEdit()->clear();
    }

}

void Vulnerability::objVulnButton()
{ // SLOT
    m_ui->comboVulnRis->clear();

    QString tmpServices_ = m_ui->GItree->currentItem()->text(0);
    QList<QTreeWidgetItem*> itemList = m_ui->listWscan->findItems(tmpServices_, Qt::MatchExactly, 2);

    if(m_ui->comboVulnRis->itemText(0).isEmpty())
    {
        m_ui->comboVulnRis->addItem(itemList[0]->text(3));
    }
    else
    {
        m_ui->comboVulnRis->setItemText(0,itemList[0]->text(3));
    }

    m_ui->m_collections->m_collectionsButton.value("scan-sez")->setChecked(false);
    m_ui->m_collections->m_collectionsButton.value("vuln-sez")->setChecked(true);
    m_ui->m_collections->m_collectionsButton.value("discover-sez")->setChecked(false);

    m_ui->toolBar->setVisible(false);
    m_ui->toolBarBook->setVisible(true);
    m_ui->toolBar_2->setVisible(false);
    m_ui->toolBarSearch->setVisible(true);

    m_ui->toolMenuBar->setVisible(false);
    m_ui->m_collections->m_discoverToolBar->setVisible(false);

    m_ui->tabUi->removeTab(m_ui->tabUi->indexOf(m_ui->bookmarks));
    m_ui->tabUi->removeTab(m_ui->tabUi->indexOf(m_ui->tabScan));
    m_ui->tabUi->removeTab(m_ui->tabUi->indexOf(m_ui->tabDiscover));
    m_ui->tabUi->removeTab(m_ui->tabUi->indexOf(m_ui->tabVulnBookmarks));
    m_ui->tabUi->insertTab(0,m_ui->tabVulnMain,QIcon(QString::fromUtf8(":/images/images/viewmag+.png")),"Vulnerability");
    m_ui->tabUi->setCurrentIndex(0);

    // disable scan action
    m_ui->toolBarTab->setVisible(false);

    m_ui->menu_Bookmaks->setEnabled(true);
    m_ui->actionAdd_Bookmark->setText(tr("Add service to &bookmark"));
    m_ui->actionAdd_Parameters_to_bookmark->setVisible(false);
    m_ui->actionAdd_vulnerability_search_url->setVisible(true);
}

void Vulnerability::loadSearchUrlIntoCombo()
{
    // clear comboWeb
    m_ui->comboWebV->clear();

    // insert default static url in comboWeb
    QListIterator< QPair<QString, QString> > i(getDefaultUrlList());
    while (i.hasNext())
    {
        m_ui->comboWebV->insertItem(m_ui->comboWebV->count()+1, i.next().first);
    }

    m_ui->comboWebV->insertSeparator(m_ui->comboWebV->count()+1);

    // value from treeWidget url
    for(int index=0; index < m_ui->treeWidgetVulnUrl->topLevelItemCount(); index++)
    {
        m_ui->comboWebV->insertItem(m_ui->comboWebV->count()+1, m_ui->treeWidgetVulnUrl->topLevelItem(index)->text(0));
    }
}

void Vulnerability::showAddUrlUi()
{
    QWeakPointer<addVulnerabilityUrl> dialogUrl = new addVulnerabilityUrl(this);

    connect(dialogUrl.data(), SIGNAL(doneUrl(QString,QString)),
            this, SLOT(addUrlToBookmarks(QString,QString)));

    dialogUrl.data()->exec();

    if (!dialogUrl.isNull())
    {
        delete dialogUrl.data();
    }
}

void Vulnerability::addUrlToBookmarks(const QString urlName, const QString urlAddr)
{
    m_ui->m_bookmark->saveAddressToBookmark(urlName,urlAddr);
    // reload comboVuln with website
    loadSearchUrlIntoCombo();
}

void Vulnerability::removeUrlToBookmarks()
{
    if (m_ui->treeWidgetVulnUrl->selectedItems().isEmpty())
    {
        return;
    }

    //remove address from bookmark
    m_ui->m_bookmark->deleteAddressFromBookmark(m_ui->treeWidgetVulnUrl->selectedItems()[0]->text(0));
    loadSearchUrlIntoCombo();
}

void Vulnerability::updateComboServicesProperties()
{
    m_ui->comboVulnRis->clear();
    m_collections.value("search-act")->setEnabled(true);
    m_ui->comboVulnRis->setStyleSheet(QString::fromUtf8(""));
    bool signalState = m_ui->comboVulnRis->lineEdit()->disconnect(SIGNAL(cursorPositionChanged(int,int)));

    if (!signalState)
        return;

    connect(m_ui->comboVulnRis, SIGNAL(editTextChanged(QString)),
            this, SLOT(linkCompleterToServices()));
}
